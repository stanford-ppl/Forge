#!/usr/bin/env python

from optparse import OptionParser
from time import localtime, strftime
from string import *
import ConfigParser
import multiprocessing
import os, sys
import math

USER_HOME = os.getenv("HOME")
FORGE_HOME = os.getenv("FORGE_HOME")
LMS_HOME = os.getenv("LMS_HOME")
JAVA_HOME = os.getenv("JAVA_HOME")
HYPER_HOME = os.getenv("HYPER_HOME")

scala_major_id = "scala-2.11"
lms_version = "lms_2.11"
script_path = os.path.dirname(__file__)
script_home = os.path.split(script_path)[0]

props = {}

def err(s):
    exit("error: " + s)

def warn(s):
    print("warn: " + s)

def main():
    usage = "usage: %prog <dsl runner> [staging args] [options]"
    parser = OptionParser(usage)
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False, help="print forge environment settings")
    parser.add_option("--nb", dest="no_blas", action="store_true", default=False, help="disable blas calls")
    parser.add_option("-d", "--dest", dest="build_dir", action="store", default=os.getenv("PWD"), help="output location for generated files")
    parser.add_option("--fastc", dest="fast_compile", action="store_true", default=False, help="try to generate faster compiling code")
    parser.add_option("--ident", dest="gen_ident", action="store_true", default=False, help="enable identity generation (re-generate a Forge spec)")
    parser.add_option("--no-delite", dest="gen_delite", action="store_false", default=True, help="disable delite generation")
    parser.add_option("--no-lib", dest="gen_lib", action="store_false", default=True, help="disable library generation")
    parser.add_option("--no-doc", dest="gen_doc", action="store_false", default=True, help="disable Sphinx document generation")

    (opts, args) = parser.parse_args()
    if len(args) < 1:
        parser.error("a dsl runner must be passed to forge as an argument")

    initialize()
    checkEnv()
    stage(args[0], args[1:len(args)], opts)

def initialize():
    pass

def checkEnv():
    global FORGE_HOME
    global USER_HOME
    global JAVA_HOME
    global HYPER_HOME
    global LMS_HOME

    if FORGE_HOME is None:
        #try to check if it is the current directory
        if os.path.isfile(script_home + "/forge.key"):
            FORGE_HOME = cand_home
        else:
            err("The FORGE_HOME environment variable must be defined")

    if HYPER_HOME is None:
        HYPER_HOME = FORGE_HOME

    if JAVA_HOME is None:
        err("The JAVA_HOME environment variable must be defined.")

    if LMS_HOME is None:
          lms_home = HYPER_HOME + "/lib_managed/jars/EPFL/" + lms_version + "/"
          if not os.path.isdir(lms_home):
              err("couldn't find the LMS library at: " + lms_home + ". Please set the LMS_HOME environment variable.")

def printEnv():
    print("======== REQUIRED METADSL ENVIRONMENT VARIABLES =========")
    print("USER_HOME = " + USER_HOME)
    print("FORGE_HOME = " + FORGE_HOME)
    print("JAVA_HOME = " + JAVA_HOME)
    print("LMS_HOME = " + LMS_HOME)

def stage(runner, params, opts):
    java_opts = os.getenv("JAVA_OPTS", "")
    java_opts = java_opts + " -server"
    if opts.fast_compile == True:
      java_opts = java_opts + " -Dforge.fast.compile=true"
    if opts.gen_ident == True:
      java_opts = java_opts + " -Dforge.gen.ident=true"
    if opts.gen_delite == False:
      java_opts = java_opts + " -Dforge.gen.delite=false"
    if opts.gen_lib == False:
      java_opts = java_opts + " -Dforge.gen.lib=false"
    if opts.gen_doc == False:
      java_opts = java_opts + " -Dforge.gen.sphinx=false"

    #add classpaths
    cp = " -cp "
    if LMS_HOME:
        cp = cp + LMS_HOME + "/target/" + scala_major_id + "/classes" + os.pathsep
    cp = cp + FORGE_HOME + "/target/" + scala_major_id + "/classes" + os.pathsep

    # add all managed libs 
    # caveat: scalatest pulls in some non-virtualized scala dependencies which conflict with the scala-virtualized versions
    jars = [os.path.join(d,f) for (d, n, fs) in os.walk(HYPER_HOME + "/lib_managed/") if not (d.count("org.scala-lang") > 0 and d.count("virtualized") == 0) for f in fs]
    for j in jars:
      cp = cp + j + os.pathsep

    java_opts = java_opts + cp
    #os.putenv("JAVA_OPTS", java_opts)

    if opts.verbose:
       printEnv()

    print "== Generating DSL with options: " + str(opts)
    java_cmd = JAVA_HOME + "/bin/java " + java_opts + " " + runner + " " + ' '.join(params)
    #print exec
    ecode = os.system(java_cmd)
    if ecode != 0:
        err("Forge compilation failed")

if __name__ == "__main__":
    main()
