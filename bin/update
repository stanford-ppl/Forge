#!/bin/bash
# runs forge, publish, and sbt compile for the generated DSL (incrementally)

# exit if any part of the script fails
set -e

EXPECTED_ARGS=2
E_BADARGS=65
E_NOHOME=66

usage() {
  echo "Usage: `basename $0` [-h] [-a] [-c] [-s step] [-f] [-g delite | lib] [-i | -r fully.qualified.ApplicationRunner] fully.qualified.DSLRunner DSLName"
  echo "Note that `basename $0` requires options to be specified before required arguments."
  echo "  -h        show this message"
  echo "  -a        do not copy included DSL apps to generated folder"
  echo "  -c        perform a clean build"
  echo "  -C        clean only extern files"
  echo "  -s <n>    skip to step n in the update process"
  echo "  -j        use jars instead of local class files"
  echo "  -f        (re-)generate forge specification"
  echo "  -S        disable Sphinx documentation generation"
  echo "  -g <gen>  generate only the specified version"
  echo "  -r <app>  run the specified application after compiling"
  echo "  -d        run delite after compiling"
  echo "  -i        run interactive shell after compiling"
  exit $E_BADARGS
}

# check FORGE_HOME exists
if [ -z "${FORGE_HOME+xxx}" ]; then echo error: FORGE_HOME is not defined; exit $E_NOHOME; fi
if [ -z "$FORGE_HOME" -a "${FORGE_HOME+xxx}" = "xxx" ]; then echo error: FORGE_HOME is set but empty; exit $E_NOHOME; fi

APP_RUNNER=""
COPY_APPS=""
CLEAN=""
CLEAN_EXTERN=""
NUM_STEPS=4
SKIP=0
DELITE=false
INTERACTIVE=false
IDENT=false
DOC=true
TARGET=""
USE_JARS=""

while getopts “hacCs:jfg:r:di” option
do
  case $option in
    h) usage;;
    a) COPY_APPS=" --no-apps";;
    c) CLEAN=" -c";;
    C) CLEAN_EXTERN=" --clean-extern";;
    s) SKIP=$OPTARG;;
    j) USE_JARS="--use-jars";;
    f) IDENT=true;;
    S) DOC=false;;
    g) TARGET="$OPTARG";;
    r) APP_RUNNER="$OPTARG"
       NUM_STEPS=$(($NUM_STEPS+1))
       ;;
    d) DELITE=true
       NUM_STEPS=$(($NUM_STEPS+1))
       ;;
    i) INTERACTIVE=true
       NUM_STEPS=$(($NUM_STEPS+1))
       ;;
  esac
done
shift $(($OPTIND - 1))

if [ $# -lt $EXPECTED_ARGS ]; then usage; fi

if [ $INTERACTIVE == true ] && [ "$APP_RUNNER" != "" ];
then
  echo error: interactive mode and application mode cannot be run at the same time
  exit $E_BADARGS
fi

DSL_RUNNER=$1
DSL_NAME=$2

if [ $SKIP -le 1 ];
then
  echo "sbt compile (1/$NUM_STEPS)"
  sbt compile
fi

FORGE_FLAGS=""
if [ $SKIP -le 2 ];
then
  if [ $IDENT == true ];
  then
    FORGE_FLAGS="--ident"
  fi
  if [ "$TARGET" == "lib" ];
  then
    FORGE_FLAGS="$FORGE_FLAGS --no-delite"
  elif [ "$TARGET" == "delite" ];
  then
    FORGE_FLAGS="$FORGE_FLAGS --no-lib"
  fi
  if [ $DOC == false ];
  then
    FORGE_FLAGS="$FORGE_FLAGS --no-doc"
  fi

  echo "forge $DSL_RUNNER $FORGE_FLAGS (2/$NUM_STEPS)"
  $FORGE_HOME/bin/forge $DSL_RUNNER $FORGE_FLAGS
fi

if [ $SKIP -le 3 ];
then
  echo "publish $DSL_NAME $CLEAN $CLEAN_EXTERN $USE_JARS $COPY_APPS (3/$NUM_STEPS)"
  $FORGE_HOME/bin/publish $DSL_NAME $CLEAN $CLEAN_EXTERN $USE_JARS $COPY_APPS
fi

pushd .

echo "cd published/$DSL_NAME/"
cd "published/$DSL_NAME/"

if [ $SKIP -le 4 ];
then
  echo "sbt compile (4/$NUM_STEPS)"
  sbt compile

  #pushd .
  #echo "cd sphinx"
  #cd "sphinx"
  #echo "sphinx-build -b latex source build"
  #sphinx-build -b latex source build
  #pushd .
  #cd build
  #make clean all > /dev/null
  #popd
  #popd
  #cp "sphinx/build/$DSL_NAME.pdf" ./Manual.pdf
  #pushd .
  #cd "sphinx"
  #sphinx-build -b html source build
  #popd 
fi

if [ $SKIP -le 5 ] && [ $INTERACTIVE == true ];
then
  echo "sbt \"; console\""
  sbt "; console"
fi

if [ $SKIP -le 5 ]  && [ "$APP_RUNNER" != "" ];
then
  echo "bin/delitec $APP_RUNNER"
  bin/delitec $APP_RUNNER
fi

if [ $SKIP -le 6 ] && [ $DELITE == true ] && [ "$APP_RUNNER" != "" ];
then
  echo "bin/delite $APP_RUNNER"
  bin/delite $APP_RUNNER
fi

popd
