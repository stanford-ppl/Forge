
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _BasicMath:

BasicMath
=========

<auto-generated stub>

Related methods
---------------

.. parsed-literal::

  :maroon:`def` abs(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` abs(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` abs(x: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` abs(x: Rep[:doc:`indexvector`]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` abs(x: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` abs(x: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` abs(x: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` acos(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` asin(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` atan(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` atan2(x: Rep[:doc:`double`], y: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` ceil(x: Rep[:doc:`double`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` cos(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` cosh(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` exp(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` exp(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` exp(x: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` exp(x: Rep[:doc:`indexvector`]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` exp(x: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` floor(x: Rep[:doc:`double`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` log(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` log(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` log(x: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` log(x: Rep[:doc:`indexvector`]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` log(x: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` log10(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` max(x: Rep[T], y: Rep[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` max(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` max(x: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` max(x: Rep[:doc:`indexvector`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` max(x: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` max(x: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` max(x: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` max(x: Rep[T]*)(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` mean(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` mean(x: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` mean(x: Rep[:doc:`indexvector`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` mean(x: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` mean(x: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` mean(x: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` mean(x: Rep[T]*)(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` median(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Numeric[T],ev1: Ordering[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` median(x: Rep[T]*)(:maroon:`implicit` ev0: Numeric[T],ev1: Ordering[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` min(x: Rep[T], y: Rep[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` min(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` min(x: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` min(x: Rep[:doc:`indexvector`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` min(x: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` min(x: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` min(x: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` min(x: Rep[T]*)(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` normalize(x: Rep[:doc:`densevector`\[:doc:`double`\]]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normalize(x: Rep[:doc:`densevector`\[:doc:`double`\]], y: NormalizeMethod): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normalize(x: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normalize(x: Rep[:doc:`densematrix`\[:doc:`double`\]], y: NormalizeMethod): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normalizeStdScalarUsing(e: Rep[:doc:`double`], avg: Rep[:doc:`double`], stddev: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` normalizeStdUsing(v: Rep[:doc:`densevector`\[:doc:`double`\]], avg: Rep[:doc:`double`], stddev: Rep[:doc:`double`]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normalizeUnityScalarUsing(e: Rep[:doc:`double`], minVal: Rep[:doc:`double`], maxVal: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` normalizeUnityUsing(v: Rep[:doc:`densevector`\[:doc:`double`\]], minVal: Rep[:doc:`double`], maxVal: Rep[:doc:`double`]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normpdf(x: Rep[:doc:`double`], mu: Rep[:doc:`double`], sigma: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` normpdf(x: Rep[:doc:`densevector`\[:doc:`double`\]], mu: Rep[:doc:`densevector`\[:doc:`double`\]], sigma: Rep[:doc:`densevector`\[:doc:`double`\]]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normpdf(x: Rep[:doc:`densematrix`\[:doc:`double`\]], mu: Rep[:doc:`densematrix`\[:doc:`double`\]], sigma: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normpdf(x: Rep[:doc:`densevector`\[:doc:`double`\]], mu: Rep[:doc:`double`], sigma: Rep[:doc:`densevector`\[:doc:`double`\]]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normpdf(x: Rep[:doc:`densevector`\[:doc:`double`\]], mu: Rep[:doc:`densevector`\[:doc:`double`\]], sigma: Rep[:doc:`double`]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normpdf(x: Rep[:doc:`densevector`\[:doc:`double`\]], mu: Rep[:doc:`double`], sigma: Rep[:doc:`double`]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normpdf(x: Rep[:doc:`densematrix`\[:doc:`double`\]], mu: Rep[:doc:`double`], sigma: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normpdf(x: Rep[:doc:`densematrix`\[:doc:`double`\]], mu: Rep[:doc:`densematrix`\[:doc:`double`\]], sigma: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` normpdf(x: Rep[:doc:`densematrix`\[:doc:`double`\]], mu: Rep[:doc:`double`], sigma: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` pow(x: Rep[:doc:`double`], y: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` prod(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` prod(x: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` prod(x: Rep[:doc:`indexvector`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` prod(x: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` round(x: Rep[:doc:`double`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` sigmoid(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` sin(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` sinh(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` sqrt(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` square(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` square(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` square(x: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` square(x: Rep[:doc:`indexvector`]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` square(x: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` square(x: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` square(x: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` stddev(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` stddev(x: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` stddev(x: Rep[:doc:`indexvector`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` stddev(x: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` sum(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` sum(x: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` sum(x: Rep[:doc:`indexvector`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` sum(x: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` sum(x: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` sum(x: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` tan(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` tanh(x: Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` variance(x: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` variance(x: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` variance(x: Rep[:doc:`indexvector`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` variance(x: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




