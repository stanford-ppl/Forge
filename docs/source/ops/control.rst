
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _Control:

Control
=======

<auto-generated stub>

Related methods
---------------

.. parsed-literal::

  :maroon:`def` getNumSockets(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` getSocket(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` replicate(x: Rep[:doc:`factorgraph`]): Rep[:doc:`replicated`\[:doc:`factorgraph`\]]




*********

.. parsed-literal::

  :maroon:`def` untilconverged(x: Rep[T], tol: Rep[:doc:`double`] = unit(.001), minIter: Rep[:doc:`int`] = 1, maxIter: Rep[:doc:`int`] = 1000, verbose: Rep[:doc:`boolean`] = false)(block: (Rep[T],Rep[:doc:`int`]) => Rep[T])(:maroon:`implicit` ev0: (Rep[T],Rep[T]) => Rep[:doc:`double`]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` untilconverged\_buffered(x: Rep[T], tol: Rep[:doc:`double`] = unit(.001), minIter: Rep[:doc:`int`] = 1, maxIter: Rep[:doc:`int`] = 1000)(block: (Rep[T]) => Rep[T])(:maroon:`implicit` ev0: (Rep[T],Rep[T]) => Rep[:doc:`double`]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` untilconverged\_withdiff(x: Rep[T], tol: Rep[:doc:`double`] = unit(.001), minIter: Rep[:doc:`int`] = 1, maxIter: Rep[:doc:`int`] = 1000)(block: (Rep[T],Rep[:doc:`int`]) => Rep[T])(diff: (Rep[T],Rep[T]) => Rep[:doc:`double`]): Rep[T]




