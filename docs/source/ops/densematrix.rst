
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _DenseMatrix:

DenseMatrix
===========

<auto-generated stub>

Static methods
--------------

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`forgearray`\[T\]], y: Rep[:doc:`int`], z: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`densevector`\[:doc:`densevector`\[T\]\]]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`densevector`\[:doc:`densevectorview`\[T\]\]]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`densevector`\[T\]]*): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` block(x: Rep[:doc:`densevector`\[:doc:`densematrix`\[T\]\]]*): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` diag(x: Rep[:doc:`int`], y: Rep[:doc:`densevector`\[T\]]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` identity(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` identity(x: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` ones(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` onesf(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` rand(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` randf(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` randn(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` randnf(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` zeros(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` zerosf(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




Infix methods
-------------

.. parsed-literal::

  :maroon:`def` \*(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[:doc:`float`\]]): Rep[:doc:`densevector`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[:doc:`double`\]]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[:doc:`float`\]]): Rep[:doc:`densevector`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[:doc:`double`\]]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[:doc:`float`\]]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[:doc:`double`\]]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \*=(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` \*=(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]

 Math 


*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` +=(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[Unit]

 Math 


*********

.. parsed-literal::

  :maroon:`def` +=(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` -=(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` -=(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densematrix`\[:doc:`float`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` \/=(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` \/=(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` :<(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Ordering[T]): Rep[:doc:`densematrix`\[:doc:`boolean`\]]




*********

.. parsed-literal::

  :maroon:`def` :>(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Ordering[T]): Rep[:doc:`densematrix`\[:doc:`boolean`\]]




*********

.. parsed-literal::

  :maroon:`def` <<(y: Rep[:doc:`densevector`\[T\]]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` <<(y: Rep[:doc:`densematrix`\[T\]]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` <<=(y: Rep[:doc:`densevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` <<=(y: Rep[:doc:`densematrix`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` <<\|(y: Rep[:doc:`densevector`\[T\]]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` <<\|(y: Rep[:doc:`densematrix`\[T\]]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` <<\|=(y: Rep[:doc:`densevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` <<\|=(y: Rep[:doc:`densematrix`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` Clone(): Rep[:doc:`densematrix`\[T\]]

 Miscellaneous 


*********

.. parsed-literal::

  :maroon:`def` \(y: Rep[:doc:`densevector`\[:doc:`double`\]]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` abs()(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`int`], z: Rep[:doc:`int`]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`int`]): Rep[:doc:`densevectorview`\[T\]]

 Accessors 


*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`indexvector`]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`indexvector`], z: IndexWildcard): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(rows: Rep[:doc:`indexvector`], cols: Rep[:doc:`indexvector`]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(y: IndexWildcard, z: Rep[:doc:`indexvector`]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` colIndices(): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` count(y: (Rep[T]) => Rep[:doc:`boolean`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` diag(): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` exp()(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` filterCols(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[:doc:`boolean`]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` filterRows(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[:doc:`boolean`]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` findCols(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[:doc:`boolean`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` findRows(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[:doc:`boolean`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` flattenToVector(): Rep[:doc:`densevector`\[T\]]

 Conversions 


*********

.. parsed-literal::

  :maroon:`def` foreach(y: (Rep[T]) => Rep[Unit]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` foreachCol(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[Unit]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` foreachRow(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[Unit]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` getCol(y: Rep[:doc:`int`]): Rep[:doc:`densevectorview`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` getCols(y: Rep[:doc:`indexvector`]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` getRow(y: Rep[:doc:`int`]): Rep[:doc:`densevectorview`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` getRows(y: Rep[:doc:`indexvector`]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` groupColsBy(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[K]): Rep[:doc:`forgehashmap`\[K,:doc:`densematrix`\[T\]\]]




*********

.. parsed-literal::

  :maroon:`def` groupRowsBy(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[K]): Rep[:doc:`forgehashmap`\[K,:doc:`densematrix`\[T\]\]]

 Bulk 


*********

.. parsed-literal::

  :maroon:`def` indices(): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` insertAllCols(pos: Rep[:doc:`int`], xs: Rep[:doc:`densematrix`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` insertAllRows(pos: Rep[:doc:`int`], xs: Rep[:doc:`densematrix`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` insertCol(pos: Rep[:doc:`int`], y: Rep[:doc:`densevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` insertRow(pos: Rep[:doc:`int`], y: Rep[:doc:`densevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` log()(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` makeDimsStr(): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` makeString()(:maroon:`implicit` ev0: Stringable[T]): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` map(y: (Rep[T]) => Rep[R]): Rep[:doc:`densematrix`\[R\]]

 Bulk 


*********

.. parsed-literal::

  :maroon:`def` mapCols(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[:doc:`densevector`\[R\]]): Rep[:doc:`densematrix`\[R\]]




*********

.. parsed-literal::

  :maroon:`def` mapColsToVector(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[R]): Rep[:doc:`densevector`\[R\]]




*********

.. parsed-literal::

  :maroon:`def` mapRows(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[:doc:`densevector`\[R\]]): Rep[:doc:`densematrix`\[R\]]




*********

.. parsed-literal::

  :maroon:`def` mapRowsToVector(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[R]): Rep[:doc:`densevector`\[R\]]




*********

.. parsed-literal::

  :maroon:`def` max()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` maxCols()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` maxIndex()(:maroon:`implicit` ev0: Ordering[T]): Rep[:doc:`tup2`\[:doc:`int`,:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` maxRows()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` mean()(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` min()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` minCols()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` minIndex()(:maroon:`implicit` ev0: Ordering[T]): Rep[:doc:`tup2`\[:doc:`int`,:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` minRows()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[:doc:`densevector`\[T\]]

 Ordering 


*********

.. parsed-literal::

  :maroon:`def` mutable(): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` mview(startRow: Rep[:doc:`int`], endRow: Rep[:doc:`int`], startCol: Rep[:doc:`int`], endCol: Rep[:doc:`int`]): Rep[:doc:`densematrixview`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` numCols(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` numRows(): Rep[:doc:`int`]

 Accessors 


*********

.. parsed-literal::

  :maroon:`def` pprint()(:maroon:`implicit` ev0: Stringable[T]): Rep[Unit]

 Miscellaneous 


*********

.. parsed-literal::

  :maroon:`def` prod()(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` reduce(y: (Rep[T],Rep[T]) => Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` reduceCols(y: (Rep[:doc:`densevector`\[T\]],Rep[:doc:`densevector`\[T\]]) => Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` reduceRows(y: (Rep[:doc:`densevector`\[T\]],Rep[:doc:`densevector`\[T\]]) => Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` removeCol(pos: Rep[:doc:`int`]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` removeCols(pos: Rep[:doc:`int`], num: Rep[:doc:`int`]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` removeRow(pos: Rep[:doc:`int`]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` removeRows(pos: Rep[:doc:`int`], num: Rep[:doc:`int`]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` replicate(y: Rep[:doc:`int`], z: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` rowIndices(): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` size(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` slice(startRow: Rep[:doc:`int`], endRow: Rep[:doc:`int`], startCol: Rep[:doc:`int`], endCol: Rep[:doc:`int`]): Rep[:doc:`densematrixview`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` sliceCols(start: Rep[:doc:`int`], end: Rep[:doc:`int`]): Rep[:doc:`densematrixview`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` sliceRows(start: Rep[:doc:`int`], end: Rep[:doc:`int`]): Rep[:doc:`densematrixview`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` sortColsBy(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[B])(:maroon:`implicit` ev0: Ordering[B]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` sortRowsBy(y: (Rep[:doc:`densevectorview`\[T\]]) => Rep[B])(:maroon:`implicit` ev0: Ordering[B]): Rep[:doc:`densematrix`\[T\]]

 Ordering 


*********

.. parsed-literal::

  :maroon:`def` stddev()(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` sum()(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` sumCols()(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` sumRows()(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` t(): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` toArray(): Rep[:doc:`forgearray`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` toBoolean()(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`boolean`]): Rep[:doc:`densematrix`\[:doc:`boolean`\]]

 Conversions 


*********

.. parsed-literal::

  :maroon:`def` toDouble()(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` toFloat()(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`float`]): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` toInt()(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` toSparse(): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` toString(): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` tril()(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` trim(): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` triu()(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` unary\_-(): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` unary\_-(): Rep[:doc:`densematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` unary\_-(): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` update(y: Rep[:doc:`int`], z: Rep[:doc:`int`], v: Rep[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` update(y: Rep[:doc:`int`], z: Rep[:doc:`densevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` update(y: Rep[:doc:`int`], z: Rep[:doc:`densevectorview`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` update(y: Rep[:doc:`indexvector`], z: Rep[:doc:`densematrix`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` updateCol(y: Rep[:doc:`int`], z: Rep[:doc:`densevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` updateCol(y: Rep[:doc:`int`], z: Rep[:doc:`densevectorview`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` updateCols(y: Rep[:doc:`indexvector`], z: Rep[:doc:`densematrix`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` updateRow(y: Rep[:doc:`int`], z: Rep[:doc:`densevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` updateRow(y: Rep[:doc:`int`], z: Rep[:doc:`densevectorview`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` updateRows(y: Rep[:doc:`indexvector`], z: Rep[:doc:`densematrix`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` variance()(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` vview(start: Rep[:doc:`int`], stride: Rep[:doc:`int`], length: Rep[:doc:`int`], isRow: Rep[:doc:`boolean`]): Rep[:doc:`densevectorview`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` zip(y: Rep[:doc:`densematrix`\[B\]])(z: (Rep[T],Rep[B]) => Rep[R]): Rep[:doc:`densematrix`\[R\]]




Implicit methods
----------------

.. parsed-literal::

  :maroon:`def` dist(x: Rep[:doc:`densematrix`\[:doc:`double`\]], y: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`double`]




Related methods
---------------

.. parsed-literal::

  :maroon:`def` \_\_equal(self: Rep[:doc:`densematrix`\\[T\\]], y: Rep[:doc:`densematrix`\[T\]]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(self: Rep[:doc:`densematrix`\\[T\\]], y: Rep[:doc:`densematrixview`\[T\]]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(self: Rep[:doc:`densematrix`\\[T\\]], y: Rep[:doc:`sparsematrix`\[T\]]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` densematrix\_fromarray(x: Rep[:doc:`forgearray`\[T\]], y: Rep[:doc:`int`], z: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` densematrix\_fromfunc(x: Rep[:doc:`int`], y: Rep[:doc:`int`], z: (Rep[:doc:`int`],Rep[:doc:`int`]) => Rep[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` densematrix\_raw\_apply(self: Rep[:doc:`densematrix`\\[T\\]], y: Rep[:doc:`int`]): Rep[T]

 Required for parallel collection 


*********

.. parsed-literal::

  :maroon:`def` densematrix\_raw\_update(self: Rep[:doc:`densematrix`\\[T\\]], y: Rep[:doc:`int`], z: Rep[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` diag(x: Rep[:doc:`densematrix`\[T\]]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` dist(x: Rep[:doc:`densematrix`\[:doc:`double`\]], y: Rep[:doc:`densematrix`\[:doc:`double`\]], z: DistanceMetric): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` norm(x: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` norm(x: Rep[:doc:`densematrix`\[:doc:`double`\]], y: NormId): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` tril(x: Rep[:doc:`densematrix`\[T\]]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` triu(x: Rep[:doc:`densematrix`\[T\]]): Rep[:doc:`densematrix`\[T\]]




