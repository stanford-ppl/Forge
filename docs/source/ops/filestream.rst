
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _FileStream:

FileStream
==========

<auto-generated stub>

Static methods
--------------

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`string`]): Rep[:doc:`filestream`]




Infix methods
-------------

.. parsed-literal::

  :maroon:`def` foreach(y: (Rep[:doc:`string`]) => Rep[Unit]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` groupRowsBy(outTable: Rep[:doc:`string`], delim: Rep[:doc:`string`] = unit("\\s+"), trim: Rep[:doc:`boolean`] = true, appendToHash: Rep[:doc:`boolean`] = false)(keyFunc: (Rep[:doc:`densevector`\[:doc:`string`\]]) => Rep[:doc:`string`], valFunc: (Rep[:doc:`densevector`\[:doc:`string`\]]) => Rep[:doc:`densevector`\[:doc:`double`\]]): Rep[:doc:`hashstream`\[:doc:`densematrix`\[:doc:`double`\]\]]




*********

.. parsed-literal::

  :maroon:`def` map(outFile: Rep[:doc:`string`], preserveOrder: Rep[:doc:`boolean`] = false, chunkSize: Rep[:doc:`long`] = filestream_getchunkbytesize())(func: (Rep[:doc:`string`]) => Rep[:doc:`string`]): Rep[:doc:`filestream`]




*********

.. parsed-literal::

  :maroon:`def` mapRows(outFile: Rep[:doc:`string`], inDelim: Rep[:doc:`string`] = unit("\\s+"), outDelim: Rep[:doc:`string`] = unit("    "), trim: Rep[:doc:`boolean`] = true)(func: (Rep[:doc:`densevector`\[:doc:`string`\]]) => Rep[:doc:`densevector`\[R\]])(:maroon:`implicit` ev0: Stringable[R]): Rep[:doc:`filestream`]




*********

.. parsed-literal::

  :maroon:`def` path(): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` processFileChunks(readFunc: (Rep[:doc:`string`],Rep[:doc:`string`]) => Rep[R], processFunc: (Rep[:doc:`forgearray`\[R\]]) => Rep[Unit], chunkSize: Rep[:doc:`long`] = filestream_getchunkbytesize()): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` reduce(zero: Rep[T])(func: (Rep[:doc:`string`]) => Rep[T])(rfunc: (Rep[T],Rep[T]) => Rep[T]): Rep[T]




Related methods
---------------

.. parsed-literal::

  :maroon:`def` getChunkByteSize(): Rep[:doc:`long`]




*********

.. parsed-literal::

  :maroon:`def` hashMatrixDeserializer(hash: Rep[:doc:`hashstream`\[:doc:`densematrix`\[:doc:`double`\]\]], k: Rep[:doc:`string`]): Rep[:doc:`densematrix`\[:doc:`double`\]]




