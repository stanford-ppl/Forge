
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _GrayscaleImage:

GrayscaleImage
==============

<auto-generated stub>

Static methods
--------------

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`grayscaleimage`]




Infix methods
-------------

.. parsed-literal::

  :maroon:`def` convolve(kernel: Rep[:doc:`densematrix`\[:doc:`double`\]]): Rep[:doc:`grayscaleimage`]




*********

.. parsed-literal::

  :maroon:`def` data(): Rep[:doc:`densematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` downsample(rowFactor: Rep[:doc:`int`], colFactor: Rep[:doc:`int`])(sample: (Rep[:doc:`grayscaleimage`]) => Rep[:doc:`double`]): Rep[:doc:`grayscaleimage`]




*********

.. parsed-literal::

  :maroon:`def` histogram(): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` numCols(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` numRows(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` windowedFilter(rowDim: Rep[:doc:`int`], colDim: Rep[:doc:`int`])(block: (Rep[:doc:`grayscaleimage`]) => Rep[:doc:`double`]): Rep[:doc:`grayscaleimage`]




