
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _IndexVector:

IndexVector
===========

<auto-generated stub>

Static methods
--------------

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`int`], y: Rep[:doc:`int`], z: Rep[:doc:`boolean`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`densevector`\[:doc:`int`\]], y: Rep[:doc:`boolean`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`forgearray`\[:doc:`int`\]], isRow: Rep[:doc:`boolean`] = true): Rep[:doc:`indexvector`]




Infix methods
-------------

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevectorview`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`sparsevector`\[:doc:`int`\]]): Rep[:doc:`sparsevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`sparsevectorview`\[:doc:`int`\]]): Rep[:doc:`sparsevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`int`]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*\*(y: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*\*(y: Rep[:doc:`densevectorview`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*\*(y: Rep[:doc:`sparsevector`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*\*(y: Rep[:doc:`sparsevectorview`\[:doc:`int`\]]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densevectorview`\[:doc:`int`\]]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`sparsevector`\[:doc:`int`\]]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`sparsevectorview`\[:doc:`int`\]]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]

 Math 


*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densevectorview`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`sparsevector`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`sparsevectorview`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`int`]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densevectorview`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`sparsevector`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`sparsevectorview`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`int`]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densevectorview`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`sparsevector`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`sparsevectorview`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`int`]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` Clone(): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` abs(): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`int`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`indexvector`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` apply(y: (Rep[:doc:`int`]) => Rep[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` contains(y: Rep[:doc:`int`]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` count(y: (Rep[:doc:`int`]) => Rep[:doc:`boolean`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` distinct(): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` drop(y: Rep[:doc:`int`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` exists(y: (Rep[:doc:`int`]) => Rep[:doc:`boolean`]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` exp(): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` filter(y: (Rep[:doc:`int`]) => Rep[:doc:`boolean`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` find(y: (Rep[:doc:`int`]) => Rep[:doc:`boolean`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` first(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` flatMap(y: (Rep[:doc:`int`]) => Rep[:doc:`densevector`\[R\]]): Rep[:doc:`densevector`\[R\]]




*********

.. parsed-literal::

  :maroon:`def` forall(y: (Rep[:doc:`int`]) => Rep[:doc:`boolean`]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` foreach(y: (Rep[:doc:`int`]) => Rep[Unit]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` histogram(): Rep[:doc:`forgehashmap`\[:doc:`int`,:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` indices(): Rep[:doc:`indexvector`]

 Accessors 


*********

.. parsed-literal::

  :maroon:`def` intersect(y: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` isEmpty(): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` isRow(): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` last(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` length(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` log(): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` makeStrWithDelim(delim: Rep[:doc:`string`]): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` makeString(): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` map(y: (Rep[:doc:`int`]) => Rep[R]): Rep[:doc:`densevector`\[R\]]

 Bulk 


*********

.. parsed-literal::

  :maroon:`def` max(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` maxIndex(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` mean()(:maroon:`implicit` ev0: (Rep[:doc:`int`]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` min(): Rep[:doc:`int`]

 Ordering 


*********

.. parsed-literal::

  :maroon:`def` minIndex(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` mutable(): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` partition(pred: (Rep[:doc:`int`]) => Rep[:doc:`boolean`]): Rep[:doc:`tup2`\[:doc:`indexvector`,:doc:`indexvector`\]]




*********

.. parsed-literal::

  :maroon:`def` pprint(): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` prefixSum(): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` prod(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` reduce(y: (Rep[:doc:`int`],Rep[:doc:`int`]) => Rep[:doc:`int`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` replicate(y: Rep[:doc:`int`], z: Rep[:doc:`int`]): Rep[:doc:`densematrix`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` scanLeft(zero: Rep[R])(z: (Rep[R],Rep[:doc:`int`]) => Rep[R]): Rep[:doc:`densevector`\[R\]]




*********

.. parsed-literal::

  :maroon:`def` scanRight(zero: Rep[R])(z: (Rep[:doc:`int`],Rep[R]) => Rep[R]): Rep[:doc:`densevector`\[R\]]




*********

.. parsed-literal::

  :maroon:`def` slice(start: Rep[:doc:`int`], end: Rep[:doc:`int`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` stddev()(:maroon:`implicit` ev0: (Rep[:doc:`int`]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` sum(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` t(): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` take(y: Rep[:doc:`int`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` toArray(): Rep[:doc:`forgearray`\[:doc:`int`\]]

 Data exchange 


*********

.. parsed-literal::

  :maroon:`def` toBoolean()(:maroon:`implicit` ev0: (Rep[:doc:`int`]) => Rep[:doc:`boolean`]): Rep[:doc:`densevector`\[:doc:`boolean`\]]

 Conversions 


*********

.. parsed-literal::

  :maroon:`def` toDense(): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` toDouble()(:maroon:`implicit` ev0: (Rep[:doc:`int`]) => Rep[:doc:`double`]): Rep[:doc:`densevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` toFloat()(:maroon:`implicit` ev0: (Rep[:doc:`int`]) => Rep[:doc:`float`]): Rep[:doc:`densevector`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` toInt()(:maroon:`implicit` ev0: (Rep[:doc:`int`]) => Rep[:doc:`int`]): Rep[:doc:`densevector`\[:doc:`int`\]]




*********

.. parsed-literal::

  :maroon:`def` toString(): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` variance()(:maroon:`implicit` ev0: (Rep[:doc:`int`]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` zip(y: Rep[:doc:`densevector`\[B\]])(z: (Rep[:doc:`int`],Rep[B]) => Rep[R]): Rep[:doc:`densevector`\[R\]]




*********

.. parsed-literal::

  :maroon:`def` zip(y: Rep[:doc:`densevectorview`\[B\]])(z: (Rep[:doc:`int`],Rep[B]) => Rep[R]): Rep[:doc:`densevector`\[R\]]




Implicit methods
----------------

.. parsed-literal::

  :maroon:`def` chainIndexToDenseIntOps(self: Rep[:doc:`indexvector`]): DenseVectorDenseVectorIntOpsCls




*********

.. parsed-literal::

  :maroon:`def` chainIndexToDenseOps(self: Rep[:doc:`indexvector`]): DenseVectorDenseVectorOpsCls[Int]




*********

.. parsed-literal::

  :maroon:`def` indexToDense(self: Rep[:doc:`indexvector`]): Rep[:doc:`densevector`\[:doc:`int`\]]




Related methods
---------------

.. parsed-literal::

  :maroon:`def` \_\_equal(self: Rep[:doc:`indexvector`], y: Rep[:doc:`indexvector`]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(self: Rep[:doc:`indexvector`], y: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` flatten(inds: Tuple2[Rep[:doc:`int`],Rep[:doc:`int`]], dims: Tuple2[Rep[:doc:`int`],Rep[:doc:`int`]]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` flatten(inds: Tuple3[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]], dims: Tuple3[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` flatten(inds: Tuple4[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]], dims: Tuple4[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` flatten(inds: Tuple5[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]], dims: Tuple5[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` flatten(inds: Tuple6[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]], dims: Tuple6[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` indexvector\_fromarray(x: Rep[:doc:`forgearray`\[:doc:`int`\]], y: Rep[:doc:`boolean`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` unflatten(i: Rep[:doc:`int`], dims: Tuple2[Rep[:doc:`int`],Rep[:doc:`int`]]): Tuple2[Rep[:doc:`int`],Rep[:doc:`int`]]




*********

.. parsed-literal::

  :maroon:`def` unflatten(i: Rep[:doc:`int`], dims: Tuple3[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]): Tuple3[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]




*********

.. parsed-literal::

  :maroon:`def` unflatten(i: Rep[:doc:`int`], dims: Tuple4[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]): Tuple4[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]




*********

.. parsed-literal::

  :maroon:`def` unflatten(i: Rep[:doc:`int`], dims: Tuple5[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]): Tuple5[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]




*********

.. parsed-literal::

  :maroon:`def` unflatten(i: Rep[:doc:`int`], dims: Tuple6[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]): Tuple6[Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`],Rep[:doc:`int`]]




