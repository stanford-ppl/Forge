
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _KeyValueStore:

KeyValueStore
=============

<auto-generated stub>

Static methods
--------------

.. parsed-literal::

  :maroon:`def` apply(table: Rep[:doc:`string`], deserialize: (Rep[:doc:`keyvaluestore`\[V\]],Rep[:doc:`string`]) => Rep[V]): Rep[:doc:`keyvaluestore`\[V\]]




Infix methods
-------------

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`string`]): Rep[V]




*********

.. parsed-literal::

  :maroon:`def` close(): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` contains(y: Rep[:doc:`string`]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` get(y: Rep[:doc:`string`]): Rep[:doc:`forgearray`\[Byte\]]




*********

.. parsed-literal::

  :maroon:`def` getAll(y: Rep[:doc:`string`]): Rep[:doc:`forgearray`\[:doc:`forgearray`\[Byte\]\]]




*********

.. parsed-literal::

  :maroon:`def` keys(): Rep[:doc:`forgearray`\[:doc:`string`\]]




*********

.. parsed-literal::

  :maroon:`def` open(): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` put(y: Rep[:doc:`string`], z: Rep[:doc:`forgearray`\[Byte\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` putAll(y: Rep[:doc:`forgearray`\[:doc:`string`\]], z: Rep[:doc:`forgearray`\[:doc:`string`\]], v: Rep[:doc:`forgearray`\[:doc:`forgearray`\[Byte\]\]], w: Rep[:doc:`int`]): Rep[Unit]




