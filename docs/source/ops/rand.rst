
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _Rand:

Rand
====

<auto-generated stub>

Related methods
---------------

.. parsed-literal::

  :maroon:`def` random(): Rep[A]




*********

.. parsed-literal::

  :maroon:`def` randomElem(x: Rep[:doc:`densevector`\[A\]]): Rep[A]




*********

.. parsed-literal::

  :maroon:`def` randomGaussian(): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` randomInt(x: Rep[:doc:`int`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` reseed(): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` sample(v: Rep[:doc:`indexvector`], pct: Rep[:doc:`double`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` sample(v: Rep[:doc:`densevector`\[A\]], pct: Rep[:doc:`double`]): Rep[:doc:`densevector`\[A\]]




*********

.. parsed-literal::

  :maroon:`def` sample(m: Rep[:doc:`densematrix`\[A\]], pct: Rep[:doc:`double`], sampleRows: Rep[:doc:`boolean`] = true): Rep[:doc:`densematrix`\[A\]]




*********

.. parsed-literal::

  :maroon:`def` shuffle(x: Rep[:doc:`indexvector`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` shuffle(x: Rep[:doc:`densevector`\[A\]]): Rep[:doc:`densevector`\[A\]]




*********

.. parsed-literal::

  :maroon:`def` shuffle(x: Rep[:doc:`densematrix`\[A\]]): Rep[:doc:`densematrix`\[A\]]




