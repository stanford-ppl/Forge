
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _SparseMatrix:

SparseMatrix
============

<auto-generated stub>

Static methods
--------------

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`sparsematrixbuildable`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` diag(x: Rep[:doc:`int`], y: Rep[:doc:`sparsevector`\[T\]]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` fromElements(numRows: Rep[:doc:`int`], numCols: Rep[:doc:`int`], nzElements: Rep[:doc:`densevector`\[T\]], nzRowIndices: Rep[:doc:`densevector`\[:doc:`int`\]], nzColIndices: Rep[:doc:`densevector`\[:doc:`int`\]]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` identity(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`sparsematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` identity(x: Rep[:doc:`int`]): Rep[:doc:`sparsematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` rand(x: Rep[:doc:`int`], y: Rep[:doc:`int`], z: Rep[:doc:`double`]): Rep[:doc:`sparsematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` randf(x: Rep[:doc:`int`], y: Rep[:doc:`int`], z: Rep[:doc:`double`]): Rep[:doc:`sparsematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` randn(x: Rep[:doc:`int`], y: Rep[:doc:`int`], z: Rep[:doc:`double`]): Rep[:doc:`sparsematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` randnf(x: Rep[:doc:`int`], y: Rep[:doc:`int`], z: Rep[:doc:`double`]): Rep[:doc:`sparsematrix`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` zeros(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`sparsematrix`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` zerosf(x: Rep[:doc:`int`], y: Rep[:doc:`int`]): Rep[:doc:`sparsematrix`\[:doc:`float`\]]




Infix methods
-------------

.. parsed-literal::

  :maroon:`def` \*(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`sparsematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` Clone(): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` abs()(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`int`], z: Rep[:doc:`int`]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`int`]): Rep[:doc:`sparsevectorview`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`indexvector`]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`indexvector`], z: IndexWildcard): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(rows: Rep[:doc:`indexvector`], cols: Rep[:doc:`indexvector`]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(y: IndexWildcard, z: Rep[:doc:`indexvector`]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` colIndices(): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` countnz(y: (Rep[T]) => Rep[:doc:`boolean`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` filterCols(y: (Rep[:doc:`sparsevectorview`\[T\]]) => Rep[:doc:`boolean`]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` filterRows(y: (Rep[:doc:`sparsevectorview`\[T\]]) => Rep[:doc:`boolean`]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` findCols(y: (Rep[:doc:`sparsevectorview`\[T\]]) => Rep[:doc:`boolean`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` findRows(y: (Rep[:doc:`sparsevectorview`\[T\]]) => Rep[:doc:`boolean`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` foreachCol(y: (Rep[:doc:`sparsevectorview`\[T\]]) => Rep[Unit]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` foreachRow(y: (Rep[:doc:`sparsevectorview`\[T\]]) => Rep[Unit]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` foreachnz(y: (Rep[T]) => Rep[Unit]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` getCol(y: Rep[:doc:`int`]): Rep[:doc:`sparsevectorview`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` getCols(y: Rep[:doc:`indexvector`]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` getRow(y: Rep[:doc:`int`]): Rep[:doc:`sparsevectorview`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` getRows(y: Rep[:doc:`indexvector`]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` makeDimsStr(): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` makeString()(:maroon:`implicit` ev0: Stringable[T]): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` mapColsToVector(y: (Rep[:doc:`sparsevectorview`\[T\]]) => Rep[R]): Rep[:doc:`sparsevector`\[R\]]




*********

.. parsed-literal::

  :maroon:`def` mapRowsToDenseVector(y: (Rep[:doc:`sparsevectorview`\[T\]]) => Rep[R]): Rep[:doc:`densevector`\[R\]]




*********

.. parsed-literal::

  :maroon:`def` mapRowsToVector(y: (Rep[:doc:`sparsevectorview`\[T\]]) => Rep[R]): Rep[:doc:`sparsevector`\[R\]]




*********

.. parsed-literal::

  :maroon:`def` mapnz(y: (Rep[T]) => Rep[R]): Rep[:doc:`sparsematrix`\[R\]]

 Bulk 


*********

.. parsed-literal::

  :maroon:`def` max()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` maxCols()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` maxRows()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` mean()(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` min()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]

 Ordering 


*********

.. parsed-literal::

  :maroon:`def` minCols()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` minRows()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` mutable(): Rep[:doc:`sparsematrixbuildable`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` nnz(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` numCols(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` numRows(): Rep[:doc:`int`]

 Accessors 


*********

.. parsed-literal::

  :maroon:`def` nz(asRow: Rep[:doc:`boolean`] = true): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` nzCols(): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` nzRows(): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` pprint()(:maroon:`implicit` ev0: Stringable[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` rowIndices(): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` size(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` slice(startRow: Rep[:doc:`int`], endRow: Rep[:doc:`int`], startCol: Rep[:doc:`int`], endCol: Rep[:doc:`int`]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` sliceCols(start: Rep[:doc:`int`], end: Rep[:doc:`int`]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` sliceRows(start: Rep[:doc:`int`], end: Rep[:doc:`int`]): Rep[:doc:`sparsematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` sum()(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` sumCols()(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` sumRows()(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` t(): Rep[:doc:`sparsematrix`\[T\]]

 Miscellaneous 


*********

.. parsed-literal::

  :maroon:`def` toDense(): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` toString(): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` zipnz(y: Rep[:doc:`densevector`\[B\]])(z: (Rep[T],Rep[B]) => Rep[R]): Rep[:doc:`sparsematrix`\[R\]]




Related methods
---------------

.. parsed-literal::

  :maroon:`def` \_\_equal(self: Rep[:doc:`sparsematrix`\\[T\\]], y: Rep[:doc:`sparsematrix`\[T\]]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(self: Rep[:doc:`sparsematrix`\\[T\\]], y: Rep[:doc:`densematrix`\[T\]]): Rep[:doc:`boolean`]




