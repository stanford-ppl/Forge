
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _SparseMatrixBuildable:

SparseMatrixBuildable
=====================

<auto-generated stub>

Infix methods
-------------

.. parsed-literal::

  :maroon:`def` <<=(y: Rep[:doc:`sparsevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` <<\|=(y: Rep[:doc:`sparsevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` append(i: Rep[:doc:`int`], j: Rep[:doc:`int`], y: Rep[T], alwaysWrite: Rep[:doc:`boolean`] = true): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` apply(i: Rep[:doc:`int`], j: Rep[:doc:`int`]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` finish(): Rep[:doc:`sparsematrix`\[T\]]

 Conversion to CSR 


*********

.. parsed-literal::

  :maroon:`def` insertCol(pos: Rep[:doc:`int`], y: Rep[:doc:`sparsevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` insertRow(pos: Rep[:doc:`int`], y: Rep[:doc:`sparsevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` makeString()(:maroon:`implicit` ev0: Stringable[T]): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` mutable(): Rep[:doc:`sparsematrixbuildable`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` nnz(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` numCols(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` numRows(): Rep[:doc:`int`]

 Accessors 


*********

.. parsed-literal::

  :maroon:`def` pprint()(:maroon:`implicit` ev0: Stringable[T]): Rep[Unit]

 Miscellaneous 


*********

.. parsed-literal::

  :maroon:`def` removeCol(pos: Rep[:doc:`int`]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` removeCols(pos: Rep[:doc:`int`], num: Rep[:doc:`int`]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` removeRow(pos: Rep[:doc:`int`]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` removeRows(pos: Rep[:doc:`int`], num: Rep[:doc:`int`]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` size(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` toString(): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` update(y: Rep[:doc:`int`], z: Rep[:doc:`int`], v: Rep[T]): Rep[Unit]




