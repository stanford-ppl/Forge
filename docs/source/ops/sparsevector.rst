
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _SparseVector:

SparseVector
============

<auto-generated stub>

Static methods
--------------

.. parsed-literal::

  :maroon:`def` apply(x: Rep[:doc:`int`], y: Rep[:doc:`boolean`]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` fromElements(length: Rep[:doc:`int`], isRow: Rep[:doc:`boolean`], nzIndices: Rep[:doc:`indexvector`], nzElements: Rep[:doc:`densevector`\[T\]]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` fromFunc(x: Rep[:doc:`int`], y: Rep[:doc:`boolean`], z: Rep[:doc:`indexvector`], v: (Rep[:doc:`int`]) => Rep[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` fromSortedElements(length: Rep[:doc:`int`], isRow: Rep[:doc:`boolean`], nzIndices: Rep[:doc:`indexvector`], nzElements: Rep[:doc:`densevector`\[T\]]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` rand(length: Rep[:doc:`int`], sparsity: Rep[:doc:`double`]): Rep[:doc:`sparsevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` randf(length: Rep[:doc:`int`], sparsity: Rep[:doc:`double`]): Rep[:doc:`sparsevector`\[:doc:`float`\]]




*********

.. parsed-literal::

  :maroon:`def` zeros(x: Rep[:doc:`int`]): Rep[:doc:`sparsevector`\[:doc:`double`\]]




*********

.. parsed-literal::

  :maroon:`def` zerosf(x: Rep[:doc:`int`]): Rep[:doc:`sparsevector`\[:doc:`float`\]]




Infix methods
-------------

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*(y: Rep[:doc:`densematrix`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*\*(y: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densematrix`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` \*:\*(y: Rep[:doc:`densevectorview`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` +(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` -(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`sparsevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[:doc:`densevector`\[T\]])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` \/(y: Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` <<(y: Rep[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` <<(y: Rep[:doc:`sparsevector`\[T\]]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` <<=(y: Rep[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` <<=(y: Rep[:doc:`sparsevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` Clone(): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` abs()(:maroon:`implicit` ev0: Arith[T]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`int`]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` apply(y: Rep[:doc:`indexvector`]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` clear(): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` contains(y: Rep[T]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` copyFrom(pos: Rep[:doc:`int`], xs: Rep[:doc:`sparsevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` countnz(y: (Rep[T]) => Rep[:doc:`boolean`]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` distinct(): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` drop(y: Rep[:doc:`int`]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` filternz(y: (Rep[T]) => Rep[:doc:`boolean`]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` findnz(y: (Rep[T]) => Rep[:doc:`boolean`]): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` first(): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` firstnz(): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` foreachnz(y: (Rep[T]) => Rep[Unit]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` indices(): Rep[:doc:`indexvector`]




*********

.. parsed-literal::

  :maroon:`def` insert(y: Rep[:doc:`int`], z: Rep[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` insertAll(pos: Rep[:doc:`int`], xs: Rep[:doc:`sparsevector`\[T\]]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` isEmpty(): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` isRow(): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` last(): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` lastnz(): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` length(): Rep[:doc:`int`]

 Accessors 


*********

.. parsed-literal::

  :maroon:`def` makeString()(:maroon:`implicit` ev0: Stringable[T]): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` mapnz(y: (Rep[T]) => Rep[R]): Rep[:doc:`sparsevector`\[R\]]

 Bulk 


*********

.. parsed-literal::

  :maroon:`def` max()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` mean()(:maroon:`implicit` ev0: (Rep[T]) => Rep[:doc:`double`]): Rep[:doc:`double`]




*********

.. parsed-literal::

  :maroon:`def` min()(:maroon:`implicit` ev0: Ordering[T],ev1: HasMinMax[T]): Rep[T]

 Ordering 


*********

.. parsed-literal::

  :maroon:`def` mt(): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` mutable(): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` nnz(): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` nz(): Rep[:doc:`densevectorview`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` pprint()(:maroon:`implicit` ev0: Stringable[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` reducenz(y: (Rep[T],Rep[T]) => Rep[T])(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` remove(y: Rep[:doc:`int`]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` removeAll(pos: Rep[:doc:`int`], len: Rep[:doc:`int`]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` slice(start: Rep[:doc:`int`], end: Rep[:doc:`int`]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` sum()(:maroon:`implicit` ev0: Arith[T]): Rep[T]




*********

.. parsed-literal::

  :maroon:`def` t(): Rep[:doc:`sparsevector`\[T\]]

 Miscellaneous 


*********

.. parsed-literal::

  :maroon:`def` take(y: Rep[:doc:`int`]): Rep[:doc:`sparsevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` toDense(): Rep[:doc:`densevector`\[T\]]




*********

.. parsed-literal::

  :maroon:`def` toString(): Rep[:doc:`string`]




*********

.. parsed-literal::

  :maroon:`def` trim(): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` update(pos: Rep[:doc:`int`], e: Rep[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` update(indices: Rep[:doc:`indexvector`], e: Rep[T]): Rep[Unit]




*********

.. parsed-literal::

  :maroon:`def` update(indices: Rep[:doc:`indexvector`], v: Rep[:doc:`sparsevector`\[T\]]): Rep[Unit]




Implicit methods
----------------

.. parsed-literal::

  :maroon:`def` dist(x: Rep[:doc:`sparsevector`\[:doc:`double`\]], y: Rep[:doc:`sparsevector`\[:doc:`double`\]]): Rep[:doc:`double`]




Related methods
---------------

.. parsed-literal::

  :maroon:`def` \_\_equal(self: Rep[:doc:`sparsevector`\\[T\\]], y: Rep[:doc:`densevector`\[T\]]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(self: Rep[:doc:`sparsevector`\\[T\\]], y: Rep[:doc:`sparsevectorview`\[T\]]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(self: Rep[:doc:`sparsevector`\\[T\\]], y: Rep[:doc:`sparsevector`\[T\]]): Rep[:doc:`boolean`]




*********

.. parsed-literal::

  :maroon:`def` dist(x: Rep[:doc:`sparsevector`\[:doc:`double`\]], y: Rep[:doc:`sparsevector`\[:doc:`double`\]], z: DistanceMetric): Rep[:doc:`double`]




