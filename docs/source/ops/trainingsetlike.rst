
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _TrainingSetLike:

TrainingSetLike
===============

<auto-generated stub>

Infix methods
-------------

.. parsed-literal::

  :maroon:`def` dot(x: Rep[TS\[D,L\]], y: Rep[:doc:`int`], z: Rep[:doc:`densevector`\[D\]])(:maroon:`implicit` ev0: Arith[D],ev1: Manifest[TS\[D,L\]]): Rep[D]




*********

.. parsed-literal::

  :maroon:`def` getCols(x: Rep[TS\[D,L\]], y: Rep[:doc:`indexvector`])(:maroon:`implicit` ev0: Manifest[TS\[D,L\]]): Rep[TS\[D,L\]]




*********

.. parsed-literal::

  :maroon:`def` getRows(x: Rep[TS\[D,L\]], y: Rep[:doc:`indexvector`])(:maroon:`implicit` ev0: Manifest[TS\[D,L\]]): Rep[TS\[D,L\]]




*********

.. parsed-literal::

  :maroon:`def` labels(x: Rep[TS\[D,L\]])(:maroon:`implicit` ev0: Manifest[TS\[D,L\]]): Rep[:doc:`densevector`\[L\]]




*********

.. parsed-literal::

  :maroon:`def` numFeatures(x: Rep[TS\[D,L\]])(:maroon:`implicit` ev0: Manifest[TS\[D,L\]]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` numSamples(x: Rep[TS\[D,L\]])(:maroon:`implicit` ev0: Manifest[TS\[D,L\]]): Rep[:doc:`int`]




*********

.. parsed-literal::

  :maroon:`def` times(x: Rep[TS\[D,L\]], y: Rep[:doc:`int`], z: Rep[:doc:`densevector`\[D\]])(:maroon:`implicit` ev0: Arith[D],ev1: Manifest[TS\[D,L\]]): Rep[:doc:`densevector`\[D\]]




*********

.. parsed-literal::

  :maroon:`def` timesScalar(x: Rep[TS\[D,L\]], y: Rep[:doc:`int`], z: Rep[D])(:maroon:`implicit` ev0: Arith[D],ev1: Manifest[TS\[D,L\]]): Rep[:doc:`densevector`\[D\]]




